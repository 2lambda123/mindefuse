#!/usr/bin/env python3.7

from typing import Dict
from .secret import Secret
from .secret_types import SecretTypes
from .generators import SecretGenerator, NumericGenerator, LStringGenerator, StringGenerator


class _SecretFactory:
    """
    Factory capable of generating Secrets
    """

    """secret type returned by default"""
    __default_secret_type = SecretTypes.NUMERIC

    """generators available to produce secrets"""
    __secret_generators = Dict[SecretTypes, SecretGenerator]

    def __init__(self):

        self.__secret_generators = {}

        # available generators
        for generator in (
                NumericGenerator(),
                LStringGenerator(),
                StringGenerator(),
        ):
            generator.register(self)

    def register(self, secret_type: SecretTypes, secret_generator: SecretGenerator):
        """
        Registers a generator to this factory
        :param secret_type: type of secret generated by the generator
        :param secret_generator: generator to register
        """
        self.__secret_generators[secret_type] = secret_generator

    def generate_secret(self, secret_type: SecretTypes, size=None) -> Secret:
        """
        Provides the requested Secret
        :param secret_type: type of secret to generate
        :param size: size of the sequence to generate
        :return: the requested secret type, or a NUMERIC Secret, otherwise
        """
        generator = self.__secret_generators.get(secret_type)

        if generator:
            return generator.generate(size=size)
        else:
            return self.generate_secret(secret_type=self.__default_secret_type, size=size)


SecretFactory = _SecretFactory()  # hacky way of allowing a stateful factory with a static class usage
